[{"content":"\r\n# 测试桩流式数据格式\r\n\r\n## 方式\r\n\r\n由测试桩发送数据( **模拟ogg解析后的数据，已经解析的数据** )入Kafka完成后，测试开始\r\n\r\n##数据格式\r\n\r\nKafka中的消息其格式描述如下：\r\n\r\n```\r处理进程标识:SCN标识号:事务ID:本地事务ID:事务标识:重建事务ID:当前操作在事务中的位置,Catalog名.Schema名.table名,操作类型,时间戳,列索引0:当前值:原始值,列索引1:当前值:原始值,列索引2:当前值:原始值……\r\n\r```\r\n\r\n* 一级分隔符用','(逗号)表示，二级分隔符用':'(冒号)表示；\r\n\r\n* 实际的消息中用0x01替换了逗号，0x02、0x03或0x04替换了冒号（用不可见字符作分隔符是为了避免字段值中可能包含分隔符从而导致消息解析出错）；\r\n\r\n* 表的列索引值-列名对应关系和主键单独在一个def文件中描述。数据更新时消息记录只包含主键列和数据修改的列。 \r\n* 分隔符为16进制的，详细看后面的样例数据解释。\r\n\r\n##数据格式说明\r\n\r\n**应用(省分)侧从kafka中读取一条消息后，可先按一级分隔符拆分，解析出的元素个数应大于等于5个**\r\n\r\n\r\n###第一个元素\r\n\r\n```\r\n处理进程标识:SCN标识号:事务ID:本地事务ID:事务标识:重建事务ID:当前操作在事务中的位置\r\n```\t\r\n\r\n**说明：**\r\n\r\n* 进程标识：一个ASCII码表示的字符串，用来标识发送消息的进程；\r* SCN标识号：一个ASCII码表示的数值，用来在初始化数据时过滤消息；\r* 事务Id：一个ASCII码表示的数值，当前本次操作操作所属的数据库事务Id；\r* 本地事务Id：一个ASCII码表示的数值，辅助事务Id重建事务的Id；\r* 事务标识：一个ASCII码表示的数值，指出该消息处在当前事务中位置(0开始、1中间、2结尾、3WHOLE、4UNKNOWN等)；\r* 重建事务ID：用于消息接收方有事务要求的情况，标识源端数据库事务的标识，一组事务的所有操作的重建事务ID相同；\r* 当前操作在事务中的位置：用于消息接收方有事务要求的情况，表示该操作在事务中是第几个操作，与重建事务ID配合使用。\r\n\r\n###第二个元素\r\n\r\n```\r\nCatalog名.Schema名.table名\r\n```\t\r\n\r\n**说明：**\r\n\r\n* 分别对应该日志发生的表名以及所属的Schema。\r\n\r\n\r\n###第三个元素\r\n\r\n```\r\n操作类型\r\n```\t\r\n\r\n**说明：**\r\n\r\n* 对应ASCII码 'I'(插入)、'D'(删除)、'U'(更新)、'K'(更新的列包含主键列或唯一索引列)。\r\n\r\n\r\n###第四个元素\r\n\r\n```\r\n时间戳\r\n```\t\r\n\r\n**说明：**\r\n\r\n* 代表该操作发生的时间，格式为yyyyMMddHHmmssssss。\r\n\r\n###第五个元素\r\n\r\n```\r\n列索引0:当前值:原始值\r\n```\t\r\n\r\n**说明：**\r\n\r\n* 从该项始将描述表中该行数据的各列数值，每项对应一个变更列。数据的每个项目中二级分隔符有3种取值：0x02或0x03或0x04。为0x02时表示后面有数据(数据长度可能为0，也可能不为0)；为0x03时表示为后面的值为数据库意义上的NULL；为0x04时表示该状态下没有这一列(两种场景会出现0x04：insert时旧值前的分隔符和delete时新值前的分隔符)。\r\n\r\n###其他说明\r\n\r\n为提高吞吐量，减少消息中重复数据(如列名、主键信息)的存储和传输，为需要同步的Oracle表创建了元数据信息文件，称作def文件(样例见附件)。Consumer从def文件中可以获取列索引对应的列的详细信息(长度、类型、是否为主键或唯一索引列等)，故消息中并无整体数据的元数据信息。\r\n\r\n##数据样例说明\r\n\r\n下面以TF_B_PAYLOG表为例，给出各个操作类型下kafka消息的样例。注：为直观，此处样例中展示的消息，一级分割符用逗号，二级分隔符用冒号；正式的消息中，会用0x01作为一级分隔符，二级分隔符视场景的不同会有0x02、0x03、0x04三种取值，第1-4个元素中的二级分隔符均为0x02，从第五个元素开始的每个元素中的二级分隔符，可能会有0x02、0x03、0x04三种取值。为0x02时表示后面有数据(数据长度可能为0，也可能不为0)；为0x03时表示为后面的值为数据库意义上的NULL；为0x04时表示该状态下没有这一列(两种场景会出现0x04：insert时旧值前的分隔符和delete时新值前的分隔符)。\r\n\r\n###表信息\r\n该表包含43列，列索引从0到42，其中，CHARGE_ID和PARTITION_ID列为主键列。关于表的详细定义信息见附件def文件。\r\n\r\n###Delete操作\r\n\r\n####语句：\r\n\r\n\u003eDELETE FROM TF_B_PAYLOG WHERE CHARGE_ID=1042;\r\n\r\n####消息：\r\n\r\n```\r\nACT_CUE1:29605250:00000001910094667555:0:3:00000001910094667555:1,BIGDATA.TF_B_PAYLOG,D,2016-01-12 07:27:00.530097,0::1042,1::10,2::23,3::34,4::234,5::,6::53,7::2,8::345,9::4243,10::100004,11::34,12::42,13::43,14::,15::2015-10-21:17:28:56,16::56,17::56,18::534,19::567,20::54,21::,22::86,23::35,24::0,25::1,26::342,27::54,28::46,29::23,30::3,31::65,32::23,33::673,34::56,35::2015-10-21:17:28:56,36::58,37::84,38::83,39::45,40::11,41::23,42::235\r\n```\r\n\r\n####说明：\r\n\r\n* ACT_CUE1:29605250:00000001910094667555:0:3:00000001910094667555:1为第一个元素，ACT_CUE1是进程标识，29605250是SCN标识号，00000001910094667555为事务Id，0为本地事务Id，3为事务标识，00000001910094667555为重建事务ID，1为当前操作在事务中的位置；\r* BIGDATA.TF_B_PAYLOG为第二个元素’ Catalog名.Schema名.table名’；\r* D为第三个元素’操作类型’，表示是删除操作；\r* 2016-01-12 07:27:00.530097为第四个元素’时间戳’；\r* 从第五个元素0::1042开始的每个元素是列变更信息，因为是删除操作，所以’当前值’均为空，且当前值前面的二级分隔符为0x04，原始值前面的二级分隔符为0x02或0x03（正式消息中）。\r\n\r\n\r\n###Insert操作\r\n\r\n####消息：\r\n\r\n```\r\nACT_CUE1:29605626:00000001910094668226:0:3:00000001910094668226:1,BIGDATA.TF_B_PAYLOG,I,2016-01-12 07:41:19.509712,0:1044:,1:10:,2:23:,3:34:,4:234:,5::,6:53:,7:2:,8:345:,9:4243:,10:100004:,11:34:,12:42:,13:43:,14::,15:2015-10-21:17:29:31:,16:56:,17:56:,18:534:,19:567:,20:54:,21::,22:86:,23:35:,24:0:,25:1:,26:342:,27:54:,28:46:,29:23:,30:3:,31:65:,32:23:,33:673:,34:56:,35:2015-10-21:17:29:31:,36:58:,37:84:,38:83:,39:45:,40:11:,41:23:,42:235:\r\n```\r\n\r\n####说明：\r\n\r\n* ACT_CUE1:29605626:00000001910094668226:0:3:00000001910094667555:1为第一个元素，ACT_CUE1是进程标识, 29605626是scn标识号，00000001910094668226是事务Id，0是本地事务Id，3为事务标识，00000001910094667555为重建事务ID，1为当前操作在事务中的位置；\r* BIGDATA.TF_B_PAYLOG是第二元素；\r* I为第三个元素’操作类型’，表示插入操作\r* 2016-01-12 07:41:19.509712为第四个元素；\r* 从第五个元素0:1044:开始的每个元素是列变更信息，因为是插入操作，所以原始值均为空，且原始值前面的二级分隔符为0x04，当前值前面的分隔符为0x02或0x03（正式消息中）。\r\r\r###Update操作\r\n\r\n####语句：\r\n\r\n\u003eUPDATE TF_B_PAYLOG SET ACCT_ID=000,REMARK='HELLO' WHERE CHARGE_ID=1044;\r\n\r\n####消息：\r\n\r\n```\r\nACT_CUE1:29605827:00000001910094669096:0:2:00000001910094667555:1,BIGDATA.TF_B_PAYLOG,U,2016-01-12 07:50:43.496418,0:1044:1044,1:10:10,8:0:345,29:hello:23\r\n```\r\n\r\n####说明：\r\n\r\n* ACT_CUE1:29605827:00000001910094669096:0:2:00000001910094668226:1为第一个元素，ACT_CUE1为进程标识，29605827为scn标识号，00000001910094669096为事务Id，0为本地事务Id，2为事务标识，00000001910094667555为重建事务ID，1为当前操作在事务中的位置；\r* BIGDATA.TF_B_PAYLOG为第二个元素；\r* U为第三个元素’操作类型’,表示更新的列均为普通列\r* 2016-01-12 07:50:43.496418为第四个元素；\r* 从第五个元素0:1044:1044开始的元素为列变更信息，由于此处更新的是第9和第30列（非主键列和唯一索引列），所以消息中只包含主键列（第一列和第二列）和变更列（第9列和第30列）的信息，且原始值和当前值前面的二级分隔符均为0x02（正式消息中）。\r\n\r\r#测试脚本及测试桩要求\r\n\r1. 测试数据来源于csv文件，合作伙伴将源数据格式转导为kafka格式，数据转导工具三家一致，转导后源数据存放在文本中；loadrunner脚本需要支持从文本逐条提取源数据的能力； \r\n\r\r1. 对于大批量持续压力往kafka里压数据的场景，loadrunner调用java程序将消息发布到kafka；\r\n\r\r1. Java脚本三家用一套，由国信提供；\r\n\r\r1. LoadRunner脚本用一套，由亚信提供；脚本要求：\r\n\r   （1）从文本中逐行提取数据，根据系统确定Topic，根据表名确定Partition，将此文本中的单行数据，调用java程序，将文本发送至对应的Topic及Partition中；\r\n\r   \r   （2）在上述要求的基础上，增加通过Rest API查询“自然人360视图”的功能；此功能针对已发送到kafka的数据，进行循环查询自然人，查询到结果后，结束当前脚本。\r\n\r1. 测试用到的kafka由各家自行搭建，kafka版本号由软研院统一要求；\r1. Topic命名规则：XJ、SH、CB；每个topic包含3个Partition。\r\r#分工界面\r\n\r\r1. Java程序，由国信于2月23日前提供；\r1. LoadRunner脚本，由亚信于2月27日前提供，视硬件资源协调到位时间适当调整提供时间;\r1. csv转导工具，由华软于2月23日前提供。\r\r\r\n","cover":"题图链接","link":"type.html","preview":"\u003cp\u003e文章预览，也可在正文中使用!\u0026ndash;more\u0026ndash;\u0026gt;分割\u003c/p\u003e\n","title":"文章标题"},{"content":"\n\n## 纸小墨简介\n\n纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。\n\n![纸小墨 - 简洁的静态博客构建工具](/images/example.png)\n\n### 开始上手\n\n- 下载并解压 [Ink](http://www.chole.io/)，运行命令 `ink preview`\n\n  \u003e 注意：Linux/macOS下，使用 `./ink preview`\n\n- 使用浏览器访问 `http://localhost:8000` 预览。\n\n### 特性介绍\n- YAML格式的配置\n- Markdown格式的文章\n- 无依赖跨平台\n- 超快的构建速度\n- 不断改善的主题与排版\n- 多文章作者支持\n- 归档与标签自动生成\n- 保存时实时预览页面\n- 离线的全文关键字搜索\n\n### 配置网站\n编辑`config.yml`，使用如下格式：\n\n``` yaml\nsite:\n    title: 网站标题\n    subtitle: 网站子标题\n    limit: 每页可显示的文章数目\n    theme: 网站主题目录\n    comment: 评论插件变量(默认为Disqus账户名)\n    root: 网站根路径 #可选\n    lang: 网站语言 #支持en, zh, ru, ja，可在theme/config.yml配置\n    url: 网站链接 #用于RSS生成\n    link: 文章链接形式 #默认为{title}.html，支持{year},{month},{day},{title}变量\n\nauthors:\n    作者ID:\n        name: 作者名称\n        intro: 作者简介\n        avatar: 作者头像路径\n\nbuild:\n    output: 构建输出目录 #可选, 默认为 \"public\"\n    port: 预览端口\n    copy:\n        - 构建时将会复制的目录/文件\n    publish: |\n        ink publish 命令将会执行的脚本\n```\n\n### 创建文章\n在`source`目录中建立任意`.md`文件（可置于子文件夹），使用如下格式：\n\n``` yaml\ntitle: 文章标题\ndate: 年-月-日 时:分:秒 #创建时间，可加时区如\" +0800\"\nupdate: 年-月-日 时:分:秒 #更新时间，可选，可加时区如\" +0800\"\nauthor: 作者ID\ncover: 题图链接 #可选\ndraft: false #草稿，可选\ntop: false #置顶文章，可选\npreview: 文章预览，也可在正文中使用\u003c!--more--\u003e分割 #可选\ntags: #可选\n    - 标签1\n    - 标签2\ntype: post #指定类型为文章(post)或页面(page)，可选\nhide: false #隐藏文章，只可通过链接访问，可选\n\n---\n\nMarkdown格式的正文\n```\n\n### 发布博客\n- 在博客目录下运行`ink publish`命令自动构建博客并发布。\n- 或运行`ink build`命令将生成的`public`目录下的内容手动部署。\n\n\u003e Tips: 在使用`ink preview`命令时，编辑保存文件后，博客会自动重新构建并刷新浏览器页面。\n\n## 定制支持\n\n### 修改主题\n\n默认主题在`theme`目录下，修改源代码后在该目录下运行`npm install`与`webpack`重新构建。\n\n页面包含`page.html`（文章列表）及`article.html`（文章）等，所有页面均支持[GO语言HTML模板](http://golang.org/pkg/html/template/)语法，可引用变量。\n\n### 添加页面\n\n在`source`目录下创建的任意`.html`文件将被复制，这些文件中可引用`config.yml`中site字段下的所有变量。\n\n### 博客迁移(Beta)\n\n纸小墨提供简单的Jeklly/Hexo博客文章格式转换，使用命令：\n``` shell\nink convert /path/_posts\n```\n\n### 源码编译\n\n本地运行\n\n1. 配置[GO](http://golang.org/doc/install)语言环境。\n2. 运行命令`go get github.com/InkProject/ink`，编译并获取ink。\n3. 运行命令`ink preview $GOPATH/src/github.com/InkProject/ink/template`，预览博客。\n\nDocker构建（示例）\n\n1. Clone源码 `git clone git@github.com:InkProject/ink.git`。\n2. 源码目录下构建镜像`docker build -t ink .`。\n3. 运行容器`docker run -p 8000:80 ink`。\n\n## 三方主题\n\n- Pure: [https://github.com/Xdatk/ink-pure](https://github.com/Xdatk/ink-pure)\n- Werttin: [https://github.com/Skimige/ink_Werttin](https://github.com/Skimige/ink_Werttin)\n\n## 反馈贡献\n\n纸小墨基于 [CC Attribution-NonCommercial License 4.0](https://creativecommons.org/licenses/by-nc/4.0/) 协议，目前为止它仍然是个非成熟的开源项目，非常欢迎任何人的任何贡献。如有问题可报告至 [https://github.com/InkProject/ink/issues](https://github.com/InkProject/ink/issues)。\n\n## 更新历史\n\n- [2016-07-11] 修复诸多Issue与合并一些PR。\n- [2015-08-15] 一些Bug修复，新增RSS订阅支持，主题改善。\n- [2015-07-04] 数项Bug修复与主题改善，支持置顶，多语言，子模板。\n- [2015-06-04] 编译更多平台版本，增加标签与存档页。\n- [2015-03-01] Beta版本，基础功能完成。\n\n## 更新计划\n\n- 排版深度优化\n- 纸小墨编辑器\n\n## 正在使用\n\n- [http://www.chole.io/blog/](http://www.chole.io/blog/)\n- [http://blog.hyper.sh/](http://blog.hyper.sh/)\n- [http://wangxu.me/](http://wangxu.me/)\n- [http://whzecomjm.com/](http://whzecomjm.com/)\n- [http://www.shery.me/blog/](http://www.shery.me/blog/)\n","cover":"/images/example.png","link":"ink-blog-tool.html","preview":"\u003cp\u003e纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。\u003c/p\u003e\n","title":"简洁的静态博客构建工具 —— 纸小墨（InkPaper）"},{"content":"\n\n## Introduce\n\nInkPaper is an static blog generator developed by Golang, No dependencies, Cross platform, Easy use, Fast build, Elegant theme.\n\n![InkPaper - An Elegant Static Blog Generator](/images/example-en.png)\n\n### Quick Start\n- Download \u0026 Extract [Ink](http://www.chole.io/)，Run `ink preview`\n\n  \u003e Tips：Linux/macOS, use `./ink preview`\n\n- Open `http://localhost:8000` in browser to preview\n\n### Website Configuration\nEdit `config.yml`, use format:\n\n``` yaml\nsite:\n    title: Website Title\n    subtitle: Website Subtitle\n    limit: Max Article Count Per Page\n    theme: Website Theme Directory\n    comment: Comment Plugin Variable (Default is disqus username)\n    root: Website Root Path #Optional\n    lang: Website Language #Support en, zh, ru, ja, Configurable in theme/lang.yml\n    url: Website URL #For RSS Generating\n    link: Article Link Scheme #Default Is {title}.html，Support {year},{month},{day},{title} Variables\n\nauthors:\n    AuthorID:\n        name: Author Name\n        intro: Author Motto\n        avatar: Author Avatar Path\n\nbuild:\n    output: Build Output Directory #Optional, Default is \"public\"\n    port: Preview Port\n    copy:\n        - Copied Files When Build\n    publish: |\n        Excuted command when use 'ink publish'\n```\n\n### Writing\nCreate any `.md` file in `source` directory (Support subdirectory), use format:\n\n``` yaml\ntitle: Article Title\ndate: Year-Month-Day Hour:Minute:Second #Created Time，Support TimeZone, such as \" +0800\"\nupdate: Year-Month-Day Hour:Minute:Second #Updated Time，Optional，Support TimeZone, such as \" +0800\"\nauthor: AuthorID\ncover: Article Cover Path #Optional\ndraft: false #If Draft，Optional\ntop: false #Place article to top, Optional\npreview: Article Preview，Also use \u003c!--more--\u003e to split in body #Optional\ntags: #Optional\n    - Tag1\n    - Tag2\ntype: post #Specify type is post or page, Optional\nhide: false #Hide article，can be accessed via URL, Optional\n\n---\n\nMarkdown Format's Body\n```\n\n### Publish\n- Run `ink publish` in blog directory to automatically build and publish\n- Or run `ink build` to manually deploy generated `public` directory\n\n\u003e **Tips**: When files changed，`ink preview` will automatically rebuild blog，refresh browser to update.\n\n## Customization\n\n### Modify Theme\n\nDefault theme placed in `theme` folder, run `npm install` and `webpack` to rebuild in this folder.\n\npage `page.html` (article list) and `article.html` (article), use variable with [Golang Template](http://golang.org/pkg/html/template/) syntax.\n\n### New Page\n\nCreated any `.html` file will be copied to `source` directory, could use all variables on `site` field in `config.yml`.\n\n### Blog Migrate (Beta)\n\nSupport simple Jeklly/Hexo post convert, use:\n\n``` shell\nink convert /path/_posts\n```\n\n### Build from source\n\nLocal Build\n\n1. Install [Golang](http://golang.org/doc/install) environment\n2. Run `go get github.com/InkProject/ink`, compile and get ink\n3. Run `ink preview $GOPATH/src/github.com/InkProject/ink/template`, preview blog\n\nDocker Build (Example)\n\n1. Clone code `git clone git@github.com:InkProject/ink.git`\n2. Build image `docker build -t ink .` in source directory\n3. Run container `docker run -p 8888:80 ink`\n\n## Theme\n\n- Pure: [https://github.com/Xdatk/ink-pure](https://github.com/Xdatk/ink-pure)\n- Werttin: [https://github.com/Skimige/ink_Werttin](https://github.com/Skimige/ink_Werttin)\n\n## Issue Report\n\n[CC Attribution-NonCommercial License 4.0](https://creativecommons.org/licenses/by-nc/4.0/)\n\n[https://github.com/InkProject/ink/issues](https://github.com/InkProject/ink/issues)\n\n## Change Log\n\n- [2016-07-11] Fix bugs and merge many PRs\n- [2015-08-15] Bug fix, support RSS feed, improve theme\n- [2015-07-04] Bug fix, improve theme, support top, i18n, subtemplate\n- [2015-06-04] Build more platform, add archive and tag page\n- [2015-03-01] Release first beta version\n\n## Develop Plan\n\n- Improve Theme\n- InkPaper Editor\n\n## They are using\n\n- [http://www.chole.io/blog/](http://www.chole.io/blog/)\n- [http://blog.hyper.sh/](http://blog.hyper.sh/)\n- [http://wangxu.me/](http://wangxu.me/)\n- [http://whzecomjm.com/](http://whzecomjm.com/)\n- [http://www.shery.me/blog/](http://www.shery.me/blog/)\n","cover":"/images/example-en.png","link":"ink-blog-tool-en.html","preview":"\u003cp\u003eInkPaper is an static blog generator developed by Golang, No dependencies, Cross platform, Easy use, Fast build, Elegant theme.\u003c/p\u003e\n","title":"An Elegant Static Blog Generator —— InkPaper"}]